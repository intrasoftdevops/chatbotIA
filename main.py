import os
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from llama_index.core import StorageContext, load_index_from_storage
from llama_index.llms.gemini import Gemini
from llama_index.embeddings.gemini import GeminiEmbedding
from llama_index.core.query_engine import RetrieverQueryEngine
from llama_index.core.response_synthesizers import CompactAndRefine
from llama_index.core.prompts import PromptTemplate
from llama_index.core.chat_engine import ContextChatEngine
from llama_index.core.llms import ChatMessage, MessageRole
from typing import Dict, List

# --- CONFIGURACI√ìN ---
load_dotenv()

# Configuraci√≥n desde variables de entorno
INDEX_DIR = os.getenv("INDEX_DIR", "storage")
LLM_MODEL = os.getenv("LLM_MODEL", "models/gemini-1.5-flash")
EMBEDDING_MODEL = os.getenv("EMBEDDING_MODEL", "models/embedding-001")

# --- PROMPT PERSONALIZADO PARA RESPUESTAS GENERALES Y TRIBALES ---
QA_PROMPT_TMPL = (
    "Eres un asistente de IA que ayuda con preguntas sobre campa√±as pol√≠ticas y temas relacionados.\n"
    "\n"
    "INSTRUCCIONES PRIORITARIAS:\n"
    "1. SIEMPRE responde en ESPA√ëOL\n"
    "2. Si encuentras informaci√≥n espec√≠fica en el contexto proporcionado, √∫sala PRIORITARIAMENTE\n"
    "3. Las FAQs del contexto contienen respuestas oficiales de la campa√±a - √∫salas textualmente cuando sea relevante\n"
    "4. Mant√©n un tono conversacional y cercano\n"
    "5. Si no hay informaci√≥n espec√≠fica en el contexto, puedes dar informaci√≥n general sobre pol√≠tica colombiana\n"
    "\n"
    "FUNCIONALIDAD ESPECIAL PARA PREGUNTAS SOBRE TRIBUS/REFERIDOS:\n"
    "- Si detectas que el usuario pregunta sobre 'tribu', 'link de tribu', 'enlace de tribu', 'referidos', etc.\n"
    "- Explica que las tribus son grupos de voluntarios organizados por regi√≥n\n"
    "- Menciona que los enlaces se comparten personalmente por los coordinadores\n"
    "- Ofrece ayuda para contactar al coordinador local\n"
    "\n"
    "Contexto de la campa√±a (FAQs oficiales):\n"
    "---------------------\n"
    "{context_str}\n"
    "---------------------\n"
    "\n"
    "Pregunta del usuario: {query_str}\n"
    "\n"
    "INSTRUCCIONES DE RESPUESTA:\n"
    "- Si la pregunta coincide con alguna FAQ del contexto, usa esa respuesta como base\n"
    "- Adapta la respuesta para que sea natural y conversacional\n"
    "- Si es sobre tribus/referidos, incluye informaci√≥n sobre el sistema\n"
    "- Mant√©n siempre el tono amigable y pol√≠tico\n"
    "- Responde SIEMPRE en espa√±ol\n"
    "\n"
    "Respuesta:"
)
QA_PROMPT = PromptTemplate(QA_PROMPT_TMPL) # Crea una plantilla de prompt a partir del template
# -------------------------------------------------------------

app = FastAPI(
    title="Chatbot de Pol√≠tica y Tribus (RAG con Gemini)",
    description="API para interactuar con un chatbot que responde preguntas sobre pol√≠tica colombiana, documentos pol√≠ticos y el sistema de tribus, con memoria conversacional (gestionada por el servidor).",
    version="1.0.0"
)

# Almacenamiento en memoria para el historial de chat
chat_histories: Dict[str, List[Dict[str, str]]] = {}
chat_engine = None
query_engine = None

class ChatRequest(BaseModel):
    query: str
    session_id: str

class TribalRequest(BaseModel):
    query: str
    session_id: str
    user_data: dict = {}

class AnalyticsRequest(BaseModel):
    query: str
    session_id: str
    user_data: dict = {}

class TribalResponse(BaseModel):
    is_tribal_request: bool
    ai_response: str
    referral_code: str = ""
    user_name: str = ""
    should_generate_link: bool = False

@app.on_event("startup")
async def startup_event():
    """Inicializa el chatbot al arrancar la aplicaci√≥n"""
    global chat_engine, query_engine
    print(f"Buscando √≠ndice en: {INDEX_DIR}...")
    if not os.path.exists(INDEX_DIR):
        print(f"ERROR: El directorio del √≠ndice '{INDEX_DIR}' no existe.")
        print("Por favor, ejecuta 'python prepare_data.py' primero para crear el √≠ndice.")
        raise RuntimeError(f"El directorio del √≠ndice '{INDEX_DIR}' no existe.")

    try:
        storage_context = StorageContext.from_defaults(persist_dir=INDEX_DIR)
        
        # Verificar que la API key est√© configurada
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            raise RuntimeError("GOOGLE_API_KEY no est√° configurada en el archivo .env")
        
        print(f"Inicializando modelo: {LLM_MODEL}")
        llm = Gemini(model_name=LLM_MODEL)
        
        embed_model = GeminiEmbedding(model=EMBEDDING_MODEL)
        print("Modelos inicializados correctamente")

        index = load_index_from_storage(storage_context, llm=llm, embed_model=embed_model)

        response_synthesizer = CompactAndRefine( 
            text_qa_template=QA_PROMPT,
            llm=llm
        )
        
        retriever = index.as_retriever()

        query_engine = RetrieverQueryEngine(
            retriever=retriever,
            response_synthesizer=response_synthesizer
        )

        chat_engine = ContextChatEngine.from_defaults(
            retriever=retriever,
            llm=llm,
            system_prompt="Eres un asistente de IA que ayuda con preguntas sobre la campa√±a pol√≠tica de Daniel Quintero. Usa la informaci√≥n espec√≠fica de las FAQs de la campa√±a cuando est√© disponible y responde siempre en espa√±ol."
        )
        print("‚úÖ Chatbot inicializado correctamente")
    except Exception as e:
        print(f"ERROR al cargar el √≠ndice de LlamaIndex o inicializar el chatbot: {e}")
        raise RuntimeError(f"Error al iniciar el chatbot: {e}")

@app.post("/chat")
async def chat(request: ChatRequest):
    """Endpoint para enviar una pregunta al chatbot y obtener una respuesta"""
    global chat_histories 
    if chat_engine is None:
        raise HTTPException(status_code=503, detail="El chatbot no est√° inicializado. Intenta de nuevo en unos segundos.")

    try:
        print(f"üìù Nueva solicitud - Sesi√≥n: {request.session_id[:8]}...")

        current_session_history_dicts = chat_histories.get(request.session_id, [])
        
        llama_messages_past = []
        if not current_session_history_dicts:
            llama_messages_past.append(ChatMessage(
                role=MessageRole.SYSTEM,
                content=(
                    "Eres un asistente de IA que ayuda con preguntas sobre la campa√±a pol√≠tica de Daniel Quintero. "
                    "Usa informaci√≥n espec√≠fica de las FAQs de la campa√±a cuando est√© disponible. Responde siempre en espa√±ol."
                )
            ))
        for msg_dict in current_session_history_dicts:
            role = MessageRole.USER if msg_dict["role"] == "user" else MessageRole.ASSISTANT
            llama_messages_past.append(ChatMessage(role=role, content=msg_dict["content"]))

        response = chat_engine.chat(
            request.query,           
            chat_history=llama_messages_past
        )
        bot_response_content = response.response
        
        current_session_history_dicts.append({"role": "user", "content": request.query})
        current_session_history_dicts.append({"role": "assistant", "content": bot_response_content})
        chat_histories[request.session_id] = current_session_history_dicts
        
        print(f"‚úÖ Respuesta generada - Sesi√≥n: {request.session_id[:8]}...")
        return {"response": {"response": bot_response_content}}
    except Exception as e:
        print(f"Error al procesar la pregunta para sesi√≥n '{request.session_id}': {e}")
        raise HTTPException(status_code=500, detail=f"Ocurri√≥ un error al procesar tu pregunta: {e}")

@app.post("/tribal-analysis", response_model=TribalResponse)
async def analyze_tribal_request(request: TribalRequest):
    """Endpoint especializado para analizar consultas sobre tribus"""
    global chat_engine
    if chat_engine is None:
        raise HTTPException(status_code=503, detail="El chatbot no est√° inicializado. Intenta de nuevo en unos segundos.")

    try:
        print(f"üîç An√°lisis de tribu - Sesi√≥n: {request.session_id[:8]}...")

        # Detectar si es una solicitud de tribu
        is_tribal = is_tribal_request(request.query)
        
        if is_tribal:
            print("‚úÖ Detectada solicitud de tribu")
            
            # Obtener datos del usuario si est√°n disponibles
            user_name = request.user_data.get("name", "")
            referral_code = request.user_data.get("referral_code", "")
            
            # Generar respuesta inteligente con IA
            tribal_prompt = f"""
            El usuario est√° solicitando el link de su tribu (equipo de referidos). 
            
            Datos del usuario:
            - Nombre: {user_name}
            - C√≥digo de referido: {referral_code}
            
            Consulta del usuario: "{request.query}"
            
            Responde de manera directa y amigable:
            1. Saluda al usuario por su nombre
            2. Confirma que entiendes que quiere el link de su tribu
            3. Si tiene c√≥digo de referido, di que el link se generar√° autom√°ticamente
            4. Explica brevemente que las tribus son equipos de referidos por regi√≥n
            5. Mant√©n un tono emp√°tico pero conciso
            6. NO incluyas explicaciones t√©cnicas sobre c√≥mo se genera el link
            7. NO menciones "simular√≠a" o "en un sistema real"
            
            La respuesta debe ser directa y √∫til, sin ser verbosa.
            """
            
            response = chat_engine.chat(tribal_prompt)
            ai_response = response.response
            
            return TribalResponse(
                is_tribal_request=True,
                ai_response=ai_response,
                referral_code=referral_code,
                user_name=user_name,
                should_generate_link=True
            )
        else:
            print("‚ùå No es solicitud de tribu")
            
            # Procesar como consulta normal
            response = chat_engine.chat(request.query)
            ai_response = response.response
            
            return TribalResponse(
                is_tribal_request=False,
                ai_response=ai_response,
                should_generate_link=False
            )
            
    except Exception as e:
        print(f"Error al analizar consulta de tribu: {e}")
        raise HTTPException(status_code=500, detail=f"Error al procesar la consulta: {e}")

def is_tribal_request(query: str) -> bool:
    """Detecta si una consulta es sobre tribus usando los patrones definidos"""
    query_lower = query.lower()
    
    # Patrones de detecci√≥n de tribus (las mismas variaciones del prompt)
    tribal_patterns = [
        # Patrones de tribu
        "m√°ndame el link de mi tribu", "env√≠ame el link de mi tribu", "¬øme puedes mandar el enlace de mi tribu?",
        "p√°same el link de la tribu", "¬ød√≥nde est√° el link de mi tribu?", "mandame el link d mi tribu",
        "mandame el link mi tribu", "pasame el link d mi tribu", "pasame link tribu", "mandame link tribu",
        "enlace tribu porfa", "link tribu ya", "dame el enlace de mi grupo", "p√°same el link del grupo",
        "¬ød√≥nde est√° el grupo?", "¬øc√≥mo entro a la tribu?", "¬øcu√°l es el link de ingreso a la tribu?",
        "parce, m√°ndame el link de mi tribu", "oe, ¬øten√©s el enlace de la tribu?", "mijo, p√°same el link del parche",
        "mija, p√°same el link del parche", "necesito el link pa entrar a mi tribu", "¬ød√≥nde est√° el bendito link de la tribu?",
        "h√°game el favor y me manda el link de la tribu", "¬øy el enlace pa unirme?", "manda ese link pues",
        "quiero entrar a mi tribu", "c√≥mo ingreso a mi tribu", "no encuentro el link de mi tribu",
        "perd√≠ el link de la tribu", "ay√∫dame con el link de la tribu", "me puedes enviar el link de mi grupo",
        "necesito volver a entrar a mi tribu", "como es que invito gente?", "dame el link",
        # Patrones de referidos (sin√≥nimos de tribu)
        "m√°ndame el link de mis referidos", "env√≠ame el enlace de mis referidos", "¬øme puedes mandar el link de referidos?",
        "p√°same el link de referidos", "¬ød√≥nde est√° mi enlace de referidos?", "mandame el link d mis referidos",
        "dame el enlace de referidos", "p√°same el enlace de referidos", "link de referidos porfa",
        "¬øc√≥mo obtengo mi link de referidos?", "¬ød√≥nde est√° mi link de referidos?", "necesito mi enlace de referidos",
        "parce, m√°ndame el link de mis referidos", "oe, ¬øten√©s mi enlace de referidos?", "mijo, p√°same el link de referidos",
        "perd√≠ mi link de referidos", "ay√∫dame con mi enlace de referidos", "no encuentro mi link de referidos",
        "quiero mi link de referidos", "c√≥mo obtengo mi enlace de referidos", "dame mi link de referidos",
        "dame mi enlace de referidos", "mandame el link de referidos", "pasame el link de referidos", "enlace de referidos ya",
        "¬ød√≥nde est√° el link de referidos?", "¬øc√≥mo entro a mis referidos?", "¬øcu√°l es el link de mis referidos?",
        "necesito el link pa mis referidos", "¬ød√≥nde est√° el bendito link de referidos?", "h√°game el favor y me manda el link de referidos",
        "quiero entrar a mis referidos", "c√≥mo ingreso a mis referidos", "no encuentro mi link de referidos",
        "perd√≠ mi link de referidos", "ay√∫dame con mi link de referidos", "me puedes enviar mi link de referidos",
        # Patrones simples de referido
        "referido", "referidos", "mi referido", "mis referidos", "el referido", "los referidos",
        "dame referido", "dame referidos", "quiero referido", "quiero referidos", "necesito referido", "necesito referidos",
        "link referido", "link referidos", "enlace referido", "enlace referidos", "mi link referido", "mi link referidos"
    ]
    
    for pattern in tribal_patterns:
        if pattern in query_lower:
            return True
    
    return False

@app.get("/")
async def root():
    return {"message": "El Chatbot de Pol√≠tica y Tribus API est√° funcionando. Usa /chat para enviar preguntas."}

@app.post("/analytics-chat")
async def analytics_chat(request: AnalyticsRequest):
    """Endpoint para manejar consultas de analytics con datos del usuario"""
    try:
        print(f"üìä Analytics Chat - Sesi√≥n: {request.session_id[:8]}...")
        
        # Extraer datos de analytics
        analytics_data = request.user_data.get("analytics_data", {})
        
        if not analytics_data:
            # Fallback si no hay datos de analytics
            response = chat_engine.chat(request.query)
            return {"response": {"response": response.response}}
        
        # Construir prompt con datos de analytics
        analytics_prompt = build_analytics_prompt(request.query, analytics_data)
        
        # Generar respuesta con IA
        response = chat_engine.chat(analytics_prompt)
        
        return {"response": {"response": response.response}}
        
    except Exception as e:
        print(f"Error en analytics chat: {e}")
        raise HTTPException(status_code=500, detail=f"Error al procesar analytics: {e}")

def build_analytics_prompt(query: str, analytics_data: dict) -> str:
    """Construye un prompt personalizado con datos de analytics"""
    # Extraer datos de analytics
    user_name = analytics_data.get("name", "Voluntario")
    ranking = analytics_data.get("ranking", {})
    region = analytics_data.get("region", {})
    city = analytics_data.get("city", {})
    referrals = analytics_data.get("referrals", {})
    
    # Construir contexto de analytics
    analytics_context = f"""
    DATOS DE RENDIMIENTO DEL USUARIO:
    - Nombre: {user_name}
    
    RANKING:
    - Hoy: Posici√≥n #{ranking.get('today', {}).get('position', 'N/A')} con {ranking.get('today', {}).get('points', 0)} puntos
    - Esta semana: Posici√≥n #{ranking.get('week', {}).get('position', 'N/A')} con {ranking.get('week', {}).get('points', 0)} puntos
    - Este mes: Posici√≥n #{ranking.get('month', {}).get('position', 'N/A')} con {ranking.get('month', {}).get('points', 0)} puntos
    
    POSICI√ìN GEOGR√ÅFICA:
    - Ciudad: Posici√≥n #{city.get('position', 'N/A')} de {city.get('totalParticipants', 0)} participantes
    - Colombia: Posici√≥n #{region.get('position', 'N/A')} de {region.get('totalParticipants', 0)} participantes
    
    REFERIDOS:
    - Total invitados: {referrals.get('totalInvited', 0)}
    - Voluntarios activos: {referrals.get('activeVolunteers', 0)}
    - Referidos este mes: {referrals.get('referralsThisMonth', 0)}
    - Tasa de conversi√≥n: {referrals.get('conversionRate', 0)}%
    - Puntos por referidos: {referrals.get('referralPoints', 0)}
    """
    
    # Prompt personalizado para IA Pol√≠tica
    prompt = f"""
    Eres una IA pol√≠tica especializada en an√°lisis de campa√±as. El usuario te est√° preguntando sobre su rendimiento en la campa√±a pol√≠tica.
    
    {analytics_context}
    
    CONSULTA DEL USUARIO: "{query}"
    
    ‚ö†Ô∏è REGLA CR√çTICA: El usuario est√° en la ciudad de {user_name} (Bogot√°). 
    SIEMPRE responde con sus datos reales de Bogot√°, NO importa si pregunta sobre Medell√≠n, 
    Antioquia o cualquier otra ciudad. Los datos reales son:
    - Ciudad: Bogot√° (posici√≥n #{city.get('position', 'N/A')} de {city.get('totalParticipants', 0)})
    - Colombia: posici√≥n #{region.get('position', 'N/A')} de {region.get('totalParticipants', 0)}
    
    NUNCA menciones Medell√≠n o Antioquia en la respuesta, solo Bogot√° y Colombia.
    
    INSTRUCCIONES:
    1. Responde con un estilo motivacional y cercano propio de una campa√±a pol√≠tica
    2. Usa los datos de analytics para dar respuestas espec√≠ficas y personalizadas
    3. Celebra los logros del usuario
    4. Motiva para mejorar en √°reas donde puede crecer
    5. Mant√©n un tono pol√≠tico pero emp√°tico
    6. Si no tienes datos espec√≠ficos, usa un mensaje motivacional general
    7. Responde de manera directa y √∫til
    8. IMPORTANTE: Mant√©n las respuestas CORTAS y CONCISAS (m√°ximo 2-3 p√°rrafos)
    9. Ve directo al punto, sin repeticiones
    10. Usa frases cortas y directas
    11. No seas redundante con la informaci√≥n
    12. CR√çTICO: Usa SIEMPRE los datos reales del usuario, NO interpretes la pregunta literalmente
    13. Si el usuario pregunta sobre otra ciudad, responde con sus datos reales de su ciudad actual
    
    EJEMPLOS DE RESPUESTAS CORTAS:
    - "¬°Excelente! Posici√≥n #{ranking.get('today', {}).get('position', 'N/A')} hoy con {ranking.get('today', {}).get('points', 0)} puntos. ¬°Sigue as√≠!"
    - "En Bogot√°: #{city.get('position', 'N/A')} de {city.get('totalParticipants', 0)}. ¬°Casi en el podio!"
    - "En Colombia: #{region.get('position', 'N/A')} de {region.get('totalParticipants', 0)}. ¬°Vamos por m√°s!"
    - "Referidos: {referrals.get('totalInvited', 0)} invitados. ¬°Es hora de expandir tu red!"
    - "En Bogot√° est√°s #3 de 4. ¬°Casi en el podio! En Colombia #14 de 15."
    
    Responde como una IA pol√≠tica especializada:
    """
    
    return prompt